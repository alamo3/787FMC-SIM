
THIS IS THE CODE THAT I REPLACED WITH THE ENHANCED RUNWAY DISPLAY METHOD

//  if (runways.size() <= 5) {

           /* if (runwaySelected == null) {

                // if(panelSelector.retrieveProperty("panelstate").equals("transselect")){

                //}else{
                //panelSelector.writeProperty("panelstate","rtepagedep1");
                // }

                try {
                    jLabel61.setText("");
                    jLabel62.setText(runways.get(0));
                } catch (Exception e) {
              //      System.out.println("NO Runway HERE");
                    jLabel62.setText("");
                }
                try {
                    jLabel63.setText("");
                    jLabel64.setText(runways.get(1));
                } catch (Exception e) {
            //        System.out.println("NO Runway HERE");
                    jLabel64.setText("");
                }
                try {
                    jLabel65.setText("");
                    jLabel66.setText(runways.get(2));
                } catch (Exception e) {
             //       System.out.println("NO Runway HERE");
                    jLabel66.setText("");
                }
                try {
                    jLabel67.setText("");
                    jLabel68.setText(runways.get(3));
                } catch (Exception e) {
             //       System.out.println("NO Runway HERE");
                    jLabel68.setText("");
                }
                try {
                    jLabel69.setText("");
                    jLabel70.setText(runways.get(4));
                } catch (Exception e) {
               //     System.out.println("NO Runway HERE");
                    jLabel70.setText("");
                }


            }
            if (runwaySelected != null) {
                // if(panelSelector.retrieveProperty("panelstate").equals("transselect")){

                //}else{
                //panelSelector.writeProperty("panelstate","rtepagedep1");
                // }
                jLabel61.setText("");
                jLabel62.setText("<SEL> " + runwaySelected);
                jLabel64.setText("");
                jLabel66.setText("");
                jLabel68.setText("");
                jLabel70.setText("");
            }


        }

        if (runways.size() > 5) {


            if (runwaySelected == null) {
                //  if(panelSelector.retrieveProperty("panelstate").equals("transselect")){

                // }else{
                //panelSelector.writeProperty("panelstate","rtepagedep1");
                // }

                try {
                    jLabel61.setText("");
                    jLabel62.setText(runways.get(listrun));
                } catch (Exception e) {
             //       System.out.println("NO Runway HERE");
                    jLabel62.setText("");
                }
                try {
                    jLabel63.setText("");
                    jLabel64.setText(runways.get(listrun + 1));
                } catch (Exception e) {
             //       System.out.println("NO Runway HERE");
                    jLabel64.setText("");
                }
                try {
                    jLabel65.setText("");
                    jLabel66.setText(runways.get(listrun + 2));
                } catch (Exception e) {
              //      System.out.println("NO Runway HERE");
                    jLabel66.setText("");
                }
                try {
                    jLabel67.setText("");
                    jLabel68.setText(runways.get(listrun + 3));
                } catch (Exception e) {
              //      System.out.println("NO Runway HERE");
                    jLabel68.setText("");
                }
                try {
                    jLabel69.setText("");
                    jLabel70.setText(runways.get(listrun + 4));
                } catch (Exception e) {
             //       System.out.println("NO Runway HERE");
                    jLabel70.setText("");
                }
            }
            if (runwaySelected != null) {
                //  if(panelSelector.retrieveProperty("panelstate").equals("transselect")){

                //  }else{
                // panelSelector.writeProperty("panelstate","rtepagedep1");
                //  }
                jLabel61.setText("");
                jLabel62.setText("<SEL> " + runwaySelected);
                jLabel64.setText("");
                jLabel66.setText("");
                jLabel68.setText("");
                jLabel70.setText("");

            }

        }*/
  
  
  THIS IS THE CODE I REMOVED FROM TESTFILE.JAVA
  
   public static String[] splitString(String line, char delimiter){
  
    List<String> splits=new LinkedList<>();
  int begin=0;
  int end=0;
   int j=0;
   String catchWord="";
   
 char[] charSplit=line.toCharArray();
 for(int i=0;i<charSplit.length;i++){
   if(charSplit[i]==','){
     j=i;
     end = begin;
     while(end<i){
      catchWord=catchWord+charSplit[end]; 
      end++;
     }
     splits.add(catchWord);
     begin=i+1;
     catchWord="";
   }
 
   
 }
    splits.add(line.substring(line.lastIndexOf(',')+1,line.length()));

  
  
  return splits.toArray(new String[splits.size()]);
  
  }
  
  
  
  
  
  
  
  
  /*PropertiesChecker panelSelector = new PropertiesChecker();
FMCLogicTest accessLogic=new FMCLogicTest();
public static WaypoimtAccess navDataPull=new WaypoimtAccess();

  public String runwaySelected="24L";
    public String starSelected="LINNG8";
    public String TransSelected="WOZEE";
    String icao="CYYZ";
  public static void main(String[]args){
    
TestFile obj1=new TestFile();
    
obj1.displayStars();





        } 
    
    
    
  
 /* public void displayLegs(){
   Map<String,legs> legsData=new HashMap<>();

    List<String> rawDataSID=navDataPull.getSIDWpt(icao,sidSelected,runwaySelected,TransSelected);
    List<String> rawDataSIDLatLong=navDataPull.getSIDWptLatLong(icao,sidSelected,runwaySelected,TransSelected);
    List<String> distanceFromWPT=new ArrayList<>();
    List<String> bearingFromWPT=new ArrayList<>();
    
    List<String> altRestrictions=new LinkedList<>();
    try{
     altRestrictions=navDataPull.getAltRest(icao,sidSelected,TransSelected); 
    }catch(IOException e){}
    
    for(int i=0;i<altRestrictions.size();i++){
     System.out.println(altRestrictions.get(i)); 
    }
    
    System.out.println(rawDataSIDLatLong);
   

    for(int i=0;i<rawDataSIDLatLong.size()-2;i+=2){

        Double lat1=Double.parseDouble(rawDataSIDLatLong.get(i));
        Double lon1=Double.parseDouble(rawDataSIDLatLong.get(i+1));
        Double lat2=Double.parseDouble(rawDataSIDLatLong.get(i+2));
        Double lon2=0D;
        
        lon2=Double.parseDouble(rawDataSIDLatLong.get(i+3));
        
       navDataPull.distanceNM(lat1,lon1,lat2,lon2);
        distanceFromWPT.add(Double.toString(navDataPull.distanceNM(lat1,lon1,lat2,lon2)));

        bearingFromWPT.add(Double.toString(navDataPull.calcBearing(lat1,lon1,lat2,lon2)));


    }

    
  String []  runwayData=navDataPull.runwayData(icao,runwaySelected).split(",");

 bearingFromWPT.add(0,runwayData[2]);
    
    
     System.out.println("DFWPT: "+distanceFromWPT);
     System.out.println("ALL HGS: "+bearingFromWPT);
    int latlongselect=0;
   System.out.println(distanceFromWPT.size()-1  +"  "+ bearingFromWPT.size() );
    int latlong=0;
    int latlongBearing=0;
    int altrest=0;
    for(int i=0; i<rawDataSID.size();i++){
      
        String distanceFromLast="0 NM";
        String bearingFromLast="N/A";
        String altRestr="----";
         if(i>0&&i< bearingFromWPT.size()+3&&!(rawDataSID.get(i).charAt(0)=='('||rawDataSID.get(i).contains("VECTORS")==true)){
          
            bearingFromLast=bearingFromWPT.get(latlongBearing);
            distanceFromLast=distanceFromWPT.get(latlong);
           
//            System.out.println("Distance :" +distanceFromLast);
//            System.out.println("HDG :"+bearingFromLast);
latlong++;
latlongBearing++;


         }else if(rawDataSID.get(i).contains("RW"+runwaySelected)){
           bearingFromLast=bearingFromWPT.get(0);
           latlongBearing++;
         }
          if(i>0&&i<altRestrictions.size()+3){
            altRestr=altRestrictions.get(altrest);
            altrest++;
         }
         if(rawDataSID.get(i).charAt(0)=='('||rawDataSID.get(i).contains("VECTORS")==true){
           legsData.put(rawDataSID.get(i),new legs(rawDataSID.get(i),rawDataSIDLatLong.get(latlongselect),rawDataSIDLatLong.get(latlongselect+1),"0 NM",bearingFromLast,altRestr) );
         }else{
        legsData.put(rawDataSID.get(i),new legs(rawDataSID.get(i),rawDataSIDLatLong.get(latlongselect),rawDataSIDLatLong.get(latlongselect+1),distanceFromLast,bearingFromLast,altRestr) );
    }
        
        if(latlongselect!=rawDataSIDLatLong.size()-2){
        latlongselect+=2;
        }

    } 
   for(int i=0; i<legsData.size();i++){
   System.out.println(legsData.get(rawDataSID.get(i)).getLegName()+": Latitude: " +legsData.get(rawDataSID.get(i)).getLatitude()+" ,Longitude: "+ legsData.get(rawDataSID.get(i)).getLongitude() +" ,Distance from last:"+ legsData.get(rawDataSID.get(i)).getDistanceFromLast()+" ,Bearing From Last:"+legsData.get(rawDataSID.get(i)).getBearingFromLast() +
   " ALTITUDE RESTRICTION: "+legsData.get(rawDataSID.get(i)).getaltRestr());
   
   }
    
  }*/
  
  
  
/*  public void displayStars(){
    Map<String,Stars> stars=new LinkedHashMap<>();
    
    List<String> rawDataStars=accessLogic.getStars(icao);
    List<String> starsTransition;
    List<String> runwayAvail;
    if(starSelected!=null){
    //  starsTransition=accessLogic.getTransition(icao,starSelected);
    }

    System.out.println(rawDataStars);
    for(int i=0;i<rawDataStars.size();i++){
    
     starsTransition= accessLogic.getTransition(icao,rawDataStars.get(i));
     runwayAvail=accessLogic.getProcstoRunways(icao,rawDataStars.get(i));
      stars.put(rawDataStars.get(i),new Stars(icao,rawDataStars.get(i),starsTransition,runwayAvail));
      
      
    }
//    System.out.println(stars.size());
//    for(int i =0; i<stars.size();i++){
//      try{
//        String test;
//     System.out.println(stars.get(rawDataStars.get(i)).getStarIcao() + " : "+stars.get(rawDataStars.get(i)).getStarIdent()+" : "+stars.get(rawDataStars.get(i)).getTrans()+" : "+stars.get(rawDataStars.get(i)).getRunways());
//     }catch(NullPointerException e){}
//      
      
//    }
    
    
  */  
/*
    String line;
   long time=System.nanoTime();
   long timeItTook=0L;
    try(BufferedReader br=new BufferedReader(new InputStreamReader(new DataInputStream(new FileInputStream(System.getProperty("user.dir")+"/navdata/navdata/PROC/EGLL.txt"))))){
      while((line=br.readLine())!=null){ 
      String [] temp=splitString(line,',');
      long timetest=System.nanoTime();
        for(int i=0;i<temp.length;i++){
         System.out.println(temp[i]); 
        }
        long timeEnd=System.nanoTime();
        timeItTook=timeItTook+(timeEnd-timetest);
      
      }
    }catch (IOException e){}
    long timeend=System.nanoTime();
    System.out.println("Took "+(timeend-timeItTook-time)+" Seconds to split entire file each line for EGLL.txt");
  }*/














//REMOVED FROM WHILE LOOP FOR GETTING ATS WPTS

String[] temp= line.split(" ");
       if(taken==0){
        airway=line.replaceAll(" .*","");
        
        something.add(temp[0]);
        taken++;
        }
      
        if(airway.equals(line.replaceAll(" .*",""))==false){
         
          
          if(takeInput==true){
           takeInput=false; 
           break label1;
          }
          something.clear();
           airway=line.replaceAll(" .*","");
       
        }
          
        if(line.contains(exit)==true){
      
         takeInput=true;
        }
        
        
        if(takeInput==true){
      
         waypoints.add(temp[2]);
        
        }
        
        try{
        something.add(temp[2]);
        }catch(Exception e){something.add(line);}
        
        
        
        
        
        
        
        
        
        
        
        
        
        //WHAT I REMOVED FROM GETATS METHOD
        
        
         public List<String> getatsWaypoints(){
    String bearing=getDirectionBWAirports("CYYZ","EGLL");
    
    String directory=System.getProperty("user.dir")+"/navdata/navdata/wpNavRTE.txt";
    
    try{
     File file=new File(directory);
     System.out.println(file.exists());
      
    }catch(Exception e){}
    
    String exit="TANGI";
    String line;
    boolean takeInput=false;
    
   
    String airway="";
    int taken=0;
    List<String> waypoints=new LinkedList<>();
    List<String> cache=new LinkedList<>();
    
    HashMap<String,Airways> airways=new LinkedHashMap<>();
    Map<String,legs> legs=new LinkedHashMap<>();
    String [] temp;
    boolean begin=false;
    String wptName="";
    legs []tempwpt;
    try(BufferedReader br=new BufferedReader(new InputStreamReader(new DataInputStream(new FileInputStream(directory))))){
      
       while((line=br.readLine())!=null){
      temp=splitString(line,' ');
        if(begin==false){
          if(line.startsWith("A1")){
           begin=true; 
           airway="A1";
           cache.add(temp[3]);
           cache.add(temp[4]);
           if(taken==0){
          wptName=temp[2];
        }
          }
        }
        if(airway.equals("Z998")){
          System.out.println(legs);
         System.out.println("At Z998"); 
        }
        
        if(begin==true){
           if(airway.equals(line.replaceAll(" .*",""))==false){
            tempwpt=legs.values().toArray(new legs[legs.size()]);
            
            airways.put(airway,new Airways(airway,tempwpt,cache));
          
            airway=temp[0];
           legs.clear();
            cache.clear();
            cache.add(temp[3]);
           cache.add(temp[4]);
             wptName=temp[2];
             taken=0;
            
           }
        //  try{
        //      System.out.println(airways.get("A100").getAirwayIdent()+" : " + airways.get("A100").getWaypoints());
        //     }catch(Exception e){}
          
          if(taken==0){
          latlongDepAir=accessLogic.getAirportLatLong("CYYZ");
          
        distance=  navDataPull.distanceNM(Double.valueOf(latlongDepAir[1]),Double.valueOf(latlongDepAir[2]),Double.valueOf(temp[3]),Double.valueOf(temp[4]));
        bearing1=navDataPull.calcBearing(Double.valueOf(latlongDepAir[1]),Double.valueOf(latlongDepAir[2]),Double.valueOf(temp[3]),Double.valueOf(temp[4]));
        legs.put(temp[2],new legs(temp[2],temp[3],temp[4],Double.toString(distance),Double.toString(bearing1),"0"));
         wptName=temp[2];
         taken++;
          }else if(taken!=0){
            double distance=0D;
       String something=legs.get(wptName).getLatitude();
         latitudeWpt=Double.valueOf(legs.get(wptName).getLatitude());
       longitudeWpt=Double.valueOf(legs.get(wptName).getLongitude());
         distance=  navDataPull.distanceNM(latitudeWpt,longitudeWpt,Double.valueOf(temp[3]),Double.valueOf(temp[4]));
       double bearing1=navDataPull.calcBearing(latitudeWpt,longitudeWpt,Double.valueOf(temp[3]),Double.valueOf(temp[4]));
        legs.put(temp[2],new legs(temp[2],temp[3],temp[4],Double.toString(distance),Double.toString(bearing1),"0"));
         taken++;
         wptName=temp[2];
          }
          
   
        }
        
        
      }
    }catch(IOException e){e.printStackTrace();}
     //airways.put("Z999",new Airways(airway,tempwpt,cache));
           // airway="Z999";
           // legs.clear();
           // cache.clear();
            
            // wptName=temp[2];
             taken=0;
             
        
             
    
    try{
      FileOutputStream serialize=new FileOutputStream("airways.ser");
      ObjectOutputStream writeAirways=new ObjectOutputStream(serialize);
      writeAirways.writeObject(airways);
    }catch(IOException e){e.printStackTrace();}
    
    return waypoints;
  }
         
         
          /*  HashMap<String,Airways> airways=new LinkedHashMap<>();
    try{
    FileInputStream readAirways=new FileInputStream("airways.ser");
    ObjectInputStream readData=new ObjectInputStream(readAirways);
    airways=(LinkedHashMap)readData.readObject();
    }catch(IOException e){e.printStackTrace();}
    catch(ClassNotFoundException f){f.printStackTrace();}
    double timeEnd=System.nanoTime();
    
    
    timeInit=System.nanoTime();
     legs [] temp5=airways.get("UL18").getWaypoints();
    for(legs h1:temp5){
     System.out.println(h1.getLegName()); 
      
    }
    timeEnd=System.nanoTime();*/
         
         
         THIS IS THE CODE I TRASHED TO CACHE THE LEGS FOR EACH AIRWAY
           
           /* while(iterate.hasNext()){
    
    line=iterate.next();
    
     temp=obj1.splitString(line,' ');
     
    if(line.startsWith("A1")&&start==false){
      start=true;
      airwayIdent=temp[0];
      retain.add(airwayIdent);
    }
    
   /* if(start==true){
      if(airwayIdent.equals(line.substring(0,line.indexOf(" ")))==false){
       // System.out.println(airwayIdent);
        retain.add(airwayIdent);
        obj1.writeLegObject(airwayIdent,legsHoldAirway);
        airwayIdent=temp[0];
        legsHoldAirway.clear();
      }
      
      legsHoldAirway.put(temp[2],new waypointsAirway(temp[2],temp[3],temp[4]));
      
      
    }
    
    
    
  }*/
    
    
    
   
//System.out.println(waypoints);
/* Map<String,waypointsAirway> legs= new LinkedHashMap<>();
  try(FileInputStream readObj=new FileInputStream(System.getProperty("user.dir")+"/legs/A1.ser")){
    ObjectInputStream ois=new ObjectInputStream(readObj);
    legs=(LinkedHashMap)ois.readObject();
    
  }catch(IOException e){e.printStackTrace();}
  catch(ClassNotFoundException f){f.printStackTrace();}*/
 // System.out.println(legs.get("HCE").getWptName()+" : "+legs.get("HCE").getLatitude()+" : "+legs.get("HCE").getLongitude());
           
           
           SOME MORE TRASH CODE
           
             for(ListIterator<String> iterate = waypoints.listIterator(); iterate.hasNext();){
  line=iterate.next();    
  if(line.startsWith("A1")&&start==false){
   start=true; 
  }
  if(start==true){
   retain.add(line.substring(0,line.indexOf(" "))); 
  }
  
  
  }
  
  try(FileOutputStream fos=new FileOutputStream(System.getProperty("user.dir")+"/navdata/navdata/airwaysIdent.ser");  ObjectOutputStream oos=new ObjectOutputStream(fos) ){
   
  oos.writeObject(retain);
    oos.close();
    fos.close();
  }catch(IOException e){e.printStackTrace();}
  
 
  }



SOME MORE JUNK CODE
  
    for(ListIterator<String> iterate = waypoints.listIterator();iterate.hasNext();){
    line=iterate.next();
     temp=splitString(line,' ');
    if(line.startsWith("A1")&&start==false){
     start=true; 
     LatLongAir.add(temp[3]);
     LatLongAir.add(temp[4]);
     airway=temp[0];
    }
    if(start==true){
      if(airway.equals(line.substring(0,line.indexOf(" ")))==false){
        LatLongAir.add(temp[3]);
         LatLongAir.add(temp[4]);
         airway=temp[0];
      }
      
      
    }
    
  }
  
  try(FileOutputStream fos=new FileOutputStream(System.getProperty("user.dir")+"/navdata/navdata/airwaysLatLong.ser");  ObjectOutputStream oos=new ObjectOutputStream(fos) ){
   
  oos.writeObject(LatLongAir);
    oos.close();
    fos.close();
  }catch(IOException e){e.printStackTrace();}
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  /********************
    * 
    * HERE IS THE FINAL CODE THAT I TRASHED AFTER I SUCCESSFULLY CREATED THE AIRWAYSFINAL OBJECT :)
    * 
    * 
    * ******************/
  
   /*  List<String>airwayName=new LinkedList<>();
 Map<String,waypointsAirway> waypointAirway=new LinkedHashMap<>();
 List<String> airwayLoc=new LinkedList<>();

 
 
    try(FileInputStream fis = new FileInputStream(System.getProperty("user.dir")+"/navdata/navdata/airwaysIdent.ser"); ObjectInputStream ois=new ObjectInputStream(fis)){    
      airwayName=(LinkedList)ois.readObject();
fis.close();
ois.close();
    }catch(IOException e){e.printStackTrace();}
    catch(ClassNotFoundException f){f.printStackTrace();}

   try(FileInputStream fis = new FileInputStream(System.getProperty("user.dir")+"/navdata/navdata/airwaysLatLong.ser"); ObjectInputStream ois=new ObjectInputStream(fis)){    
      airwayLoc=(LinkedList)ois.readObject();
fis.close();
ois.close();
    }catch(IOException e){e.printStackTrace();}
    catch(ClassNotFoundException f){f.printStackTrace();}
 int latlong=0;
    Map<String, Airways> airways=new LinkedHashMap<>();
    List<String> finalLat= new LinkedList<>();
    for(int i=0;i<airwayName.size()-1;i++){
      
      try(FileInputStream fis = new FileInputStream(System.getProperty("user.dir")+"/legs/"+airwayName.get(i)+".ser"); ObjectInputStream ois=new ObjectInputStream(fis)){
      waypointAirway=(LinkedHashMap) ois.readObject();
  fis.close();
  ois.close();
    }catch(IOException e){e.printStackTrace();}
    catch(ClassNotFoundException f){f.printStackTrace();}
    finalLat.add(airwayLoc.get(latlong));
    finalLat.add(airwayLoc.get(latlong+1));
    airways.put(airwayName.get(i),new Airways(airwayName.get(i),waypointAirway,finalLat));
  
    finalLat.clear();
    
  }
    
    try(FileOutputStream fos=new FileOutputStream(System.getProperty("user.dir")+"/airwaysFinal.ser"); ObjectOutputStream oos=new ObjectOutputStream(fos)){
     oos.writeObject(airways);
     oos.close();
       fos.close();
    }catch(IOException e){e.printStackTrace();}*/
    
    
    Map<String, Airways> airways=new LinkedHashMap<>();
    
    try(FileInputStream fis = new FileInputStream(System.getProperty("user.dir")+"/airwaysFinal.ser"); ObjectInputStream ois=new ObjectInputStream(fis)){
          airways=(LinkedHashMap)ois.readObject();
          
    }catch(IOException e){e.printStackTrace();}
        catch(ClassNotFoundException f){f.printStackTrace();}
        
        Map<String,waypointsAirway> wpts=new LinkedHashMap<>();
        
        
        wpts=airways.get("Z999").getWaypoints();
        
    System.out.println(wpts.get("XEBIX").getWptName()+" : "+wpts.get("XEBIX").getLatitude()+" : "+wpts.get("XEBIX").getLongitude());
        
     System.out.println(wpts.get("BEMKI").getWptName()+" : "+wpts.get("BEMKI").getLatitude()+" : "+wpts.get("BEMKI").getLongitude());   
  System.out.println(wpts.get("KPT").getWptName()+" : "+wpts.get("KPT").getLatitude()+" : "+wpts.get("KPT").getLongitude()); 
  
  
  /**********************
    * 
    * 
    * FINAL CODE USED TO CREATE AIRWAYS OBJECT FROM MAIN METHOD
    * 
    * ************/
  
  
  //    List<String> waypoints=obj1.readLines();
//  int latlong=0;
//     List<String>airwayName=new LinkedList<>();
// Map<String,waypointsAirway> waypointAirway=new LinkedHashMap<>();
// List<String> airwayLoc=new LinkedList<>();
//
// 
//    try(FileInputStream fis = new FileInputStream(System.getProperty("user.dir")+"/navdata/navdata/airwaysIdent.ser"); ObjectInputStream ois=new ObjectInputStream(fis)){    
//      airwayName=(LinkedList)ois.readObject();
//fis.close();
//ois.close();
//    }catch(IOException e){e.printStackTrace();}
//    catch(ClassNotFoundException f){f.printStackTrace();}
//
//   try(FileInputStream fis = new FileInputStream(System.getProperty("user.dir")+"/navdata/navdata/airwaysLatLong.ser"); ObjectInputStream ois=new ObjectInputStream(fis)){    
//      airwayLoc=(LinkedList)ois.readObject();
//fis.close();
//ois.close();
//    }catch(IOException e){e.printStackTrace();}
//    catch(ClassNotFoundException f){f.printStackTrace();}
//
//    Map<String, Airways> airways=new LinkedHashMap<>();
//    List<String> finalLat= new LinkedList<>();
//    
//   // System.out.println(airwayLoc/*.get(0)+" : "+airwayLoc.get(1)*/);
//    
//    
//    
//    
//    
//    for(int i=0;i<airwayName.size();i++){
//      
//      try(FileInputStream fis = new FileInputStream(System.getProperty("user.dir")+"/legs/"+airwayName.get(i)+".ser"); ObjectInputStream ois=new ObjectInputStream(fis)){
//      waypointAirway=(LinkedHashMap) ois.readObject();
//  fis.close();
//  ois.close();
//    }catch(IOException e){e.printStackTrace();}
//    catch(ClassNotFoundException f){f.printStackTrace();}
//   
//    
//    airways.put(airwayName.get(i),new Airways(airwayName.get(i),waypointAirway,airwayLoc.get(latlong),airwayLoc.get(latlong+1)));
//  
//  latlong=latlong+2;
//    
//  }
//    
//    try(FileOutputStream fos=new FileOutputStream(System.getProperty("user.dir")+"/airwaysFinal.ser"); ObjectOutputStream oos=new ObjectOutputStream(fos)){
//     oos.writeObject(airways);
//     oos.close();
//       fos.close();
//    }catch(IOException e){e.printStackTrace();}
//        
   
 
    
        Map<String, Airways> airways=new LinkedHashMap<>();
    
    try(FileInputStream fis = new FileInputStream(System.getProperty("user.dir")+"/airwaysFinal.ser"); ObjectInputStream ois=new ObjectInputStream(fis)){
          airways=(LinkedHashMap)ois.readObject();
          
    }catch(IOException e){e.printStackTrace();}
        catch(ClassNotFoundException f){f.printStackTrace();}
        
        String[]temp=airways.get("Z924").getLocation();
        System.out.println(temp[0]);
        System.out.println(temp[1]);
        
        
//        
    
//    List<String>retain=new LinkedList<>();
//       boolean start=false;
//    String airway="";
//    String line="";
//       for(ListIterator<String> iterate = waypoints.listIterator(); iterate.hasNext();){
//  line=iterate.next();    
//  if(line.startsWith("A1")&&start==false){
//    airway=line.substring(0,line.indexOf(" "));
//   start=true; 
//  }
//  if(start==true){
//    if(airway.equals(line.substring(0,line.indexOf(" ")))==false){
//   retain.add(line.substring(0,line.indexOf(" "))); 
//   airway=line.substring(0,line.indexOf(" "));
//    }
//  }
//  
//  
//  }
//  
//  try(FileOutputStream fos=new FileOutputStream(System.getProperty("user.dir")+"/navdata/navdata/airways.ser");  ObjectOutputStream oos=new ObjectOutputStream(fos) ){
//   
//  oos.writeObject(retain);
//    oos.close();
//    fos.close();
//  }catch(IOException e){e.printStackTrace();}
  
        
         if(start==true){
    
    if(temp[0].equals("")){
      if(navaidsTemp.containsKey(temp[8])==false){
        try{
      if(temp[1].equals("2")){
       type="NDB"; 
       navaidsTemp.put(temp[8],new Navaid(temp[8],temp[11],type,temp[5],temp[2],temp[3]));
      }else if(temp[1].equals("3")){
       type="VOR"; 
       navaidsTemp.put(temp[8],new Navaid(temp[8],temp[11],type,temp[5],temp[2],temp[3]));
      }else if(temp[1].equals("4")||temp[1].equals("5")){
       type="LOC"; 
      }else if(temp[1].equals("6")){
       type="GLIDE"; 
      }else if(temp[1].equals("7")||temp[1].equals("8")||temp[1].equals("9")){
        type="MARKER";
     
   navaidsTemp.put(temp[8],new Navaid(temp[8],temp[11],type,temp[5],temp[2],temp[3]));
        }catch(ArrayIndexOutOfBoundsException e){for(String next: temp){System.out.println(next);} System.out.println("Count :"+count); break label1; 
        }
      }else{
     
   }
   
    }else{
      if(navaidsTemp.containsKey(temp[7])==false){
      if(temp[0].equals("12")||temp[0].equals("13")){
       type="DME"; 
      }
   navaidsTemp.put(temp[7],new Navaid(temp[7],temp[10],type,temp[4],temp[1],temp[2]));
      
    }
    
  }
  
  
}
  
  }
         
         
  String[]temp;
Multimap<String, Navaid> multimap = LinkedListMultimap.create();
String line="";
for(int i=0;i<lines.size();i++){
  line=lines.get(i);
  temp=splitString(line,',');
  try{
  if(((temp[3].equals("0"))||(temp[3].equals("1")))&&((temp[4].equals("0"))||(temp[4].equals("1")))&&(temp[1].contains("ILS/")==false)){
    if(temp[3].equals("0")&&temp[4].equals("1")){
     multimap.put(temp[0],new Navaid(temp[1],temp[0],"DME",temp[2],temp[6],temp[7])); 
      
    }else if(temp[3].equals("0")&&temp[4].equals("0")){
      
       multimap.put(temp[0],new Navaid(temp[1],temp[0],"NDB",temp[2],temp[6],temp[7]));
      
    }else if(temp[3].equals("1")&&temp[4].equals("1")){
      
       multimap.put(temp[0],new Navaid(temp[1],temp[0],"VOR",temp[2],temp[6],temp[7]));
    }
    
  }
  }catch(ArrayIndexOutOfBoundsException e){e.printStackTrace(); System.out.println(line);}
  
  
  
  
  
  
}

   Collection<Navaid> navaids=multimap.get("BK");
   List<Navaid> collectnav=new LinkedList<>();
   collectnav.addAll(navaids);
   
   List<String> names=new ArrayList<>();
   List<String> ident=new ArrayList<>();
   List<String> freq=new ArrayList<>();
   List<String> lat=new ArrayList<>();
   List<String> longColl=new ArrayList<>();
   List<String> type=new ArrayList<>();
   for(int i=0;i<collectnav.size();i++){
    names.add(collectnav.get(i).getName());
    ident.add(collectnav.get(i).getIdent());
    freq.add(collectnav.get(i).getFreq());
    lat.add(collectnav.get(i).getLatitude());
    longColl.add(collectnav.get(i).getLongitude());
    type.add(collectnav.get(i).getType());
     
   }
   for(int i=0;i<collectnav.size();i++){
    System.out.println(names.get(i)+" Ident:"+ident.get(i)+" Type: "+type.get(i)+" Frequency:"+freq.get(i)+" Latitude:"+lat.get(i)+" Longitude:"+longColl.get(i)); 
   }
    
   
   try(FileOutputStream fos=new FileOutputStream(System.getProperty("user.dir")+"/navdata/navdata/navaids.ser"); ObjectOutputStream oos=new ObjectOutputStream(fos)){
   oos.writeObject(multimap);
     
     
   }catch(IOException e){e.printStackTrace();}
   
   
   
   
   
   
 List<String> lines=obj1.readLines();   
    
 Map<String,Waypoints> wpts=new LinkedHashMap<>();
 
  String [] temp;
  File file=new File(System.getProperty("user.dir")+"/navdata/navdata/waypointsdata.txt");
  
  
  for(int i=0;i<lines.size();i++){
  temp=splitString(lines.get(i),',');
  try(FileWriter fw=new FileWriter(file);BufferedWriter bw=new BufferedWriter(fw)){
    if(file.exists()==false){
     file.createNewFile(); 
    }
   bw.write(i +": "+lines.get(i));
  }catch(IOException f){f.printStackTrace();}
 
  wpts.put(temp[0],new Waypoints(temp[0],temp[1],temp[2]));
  if(i==60768){
   System.out.println("Almost done"); 
  }
    
  }
  
  try(FileOutputStream fos=new FileOutputStream(System.getProperty("user.dir")+"/navdata/navdata/waypoints.ser"); ObjectOutputStream oos=new ObjectOutputStream(fos)){
 oos.writeObject(wpts);
 
  }catch(IOException e){e.printStackTrace();}
   System.out.println(wpts.get("DOAME").getName()+" : "+wpts.get("DOAME").getLatitude()+" : "+wpts.get("DOAME").getLongitude());
   
   
   
   
   
   //////////WHAT I REMOVED FROM GET RTE METHOD FOR THE NEW IMPLEMENTATION 
   
   if(sidSelected==null){
       jLabel51.setText("");
       jLabel52.setText("----");
       jLabel61.setText("");
       jLabel62.setText("----");
        jLabel49.setText("");
        jLabel50.setText("");
        jLabel63.setText("");
        jLabel64.setText("");
        jLabel54.setText("");
        jLabel65.setText("");
        jLabel66.setText("");
        jLabel55.setText("");
        jLabel56.setText("");
        jLabel67.setText("");
        jLabel68.setText("");
        jLabel58.setText("");
        jLabel59.setText("");
        jLabel69.setText("");
        jLabel70.setText("");
      }else{
        if(TransSelected!=null){
          jLabel51.setText("");
       jLabel52.setText(sidSelected+"."+TransSelected);
        }else{
         jLabel51.setText("");
       jLabel52.setText(sidSelected+"."+panelSelector.retrieveProperty("runwaydep")); 
        }
        
        
        
      }